/* Generated By:JavaCC: Do not edit this line. TyRuBaParserTokenManager.java */
package tyRuBa.parser;

public class TyRuBaParserTokenManager implements TyRuBaParserConstants
{
        int nestedBraces = 0;
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x20000000000000L) != 0L)
            return 65;
         if ((active0 & 0x390004000000000L) != 0L)
            return 28;
         if ((active0 & 0x3fffff0000L) != 0L)
         {
            jjmatchedKind = 60;
            return 30;
         }
         if ((active0 & 0x400000000e000L) != 0L)
            return 36;
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 58;
            return 28;
         }
         if ((active0 & 0x2000000000000L) != 0L)
            return 5;
         return -1;
      case 1:
         if ((active0 & 0xc000000000L) != 0L)
            return 28;
         if ((active0 & 0xe000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 1;
            return 101;
         }
         if ((active0 & 0x2ff6ff0000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 1;
            return 30;
         }
         if ((active0 & 0x1009000000L) != 0L)
            return 30;
         return -1;
      case 2:
         if ((active0 & 0xe000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 2;
            return 101;
         }
         if ((active0 & 0x2fc6fe0000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 2;
            return 30;
         }
         if ((active0 & 0x30010000L) != 0L)
            return 30;
         return -1;
      case 3:
         if ((active0 & 0x27c2be0000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 3;
            return 30;
         }
         if ((active0 & 0xe000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 3;
            return 101;
         }
         if ((active0 & 0x804400000L) != 0L)
            return 30;
         return -1;
      case 4:
         if ((active0 & 0x25423a0000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 4;
            return 30;
         }
         if ((active0 & 0xe000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 4;
            return 101;
         }
         if ((active0 & 0x280840000L) != 0L)
            return 30;
         return -1;
      case 5:
         if ((active0 & 0xe000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 5;
            return 101;
         }
         if ((active0 & 0x2440180000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 5;
            return 30;
         }
         if ((active0 & 0x102220000L) != 0L)
            return 30;
         return -1;
      case 6:
         if ((active0 & 0x2000100000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 6;
            return 30;
         }
         if ((active0 & 0xe000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 6;
            return 101;
         }
         if ((active0 & 0x440080000L) != 0L)
            return 30;
         return -1;
      case 7:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 7;
            return 30;
         }
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 7;
            return 101;
         }
         if ((active0 & 0x6000L) != 0L)
            return 101;
         if ((active0 & 0x100000L) != 0L)
            return 30;
         return -1;
      case 8:
         if ((active0 & 0x8000L) != 0L)
            return 101;
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 8;
            return 30;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 35:
         jjmatchedKind = 50;
         return jjMoveStringLiteralDfa1_0(0xe000L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x8000000000L);
      case 40:
         return jjStopAtPos(0, 41);
      case 41:
         return jjStopAtPos(0, 42);
      case 42:
         return jjStartNfaWithStates_0(0, 56, 28);
      case 43:
         return jjStartNfaWithStates_0(0, 55, 28);
      case 44:
         return jjStopAtPos(0, 48);
      case 46:
         return jjStartNfaWithStates_0(0, 49, 5);
      case 47:
         return jjStartNfaWithStates_0(0, 53, 65);
      case 58:
         jjmatchedKind = 74;
         return jjMoveStringLiteralDfa1_0(0x40010000000000L);
      case 59:
         return jjStopAtPos(0, 47);
      case 60:
         return jjStopAtPos(0, 45);
      case 61:
         return jjStartNfaWithStates_0(0, 57, 28);
      case 62:
         return jjStopAtPos(0, 46);
      case 64:
         return jjStopAtPos(0, 51);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x200000000L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x420000000L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x10020000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x800080000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x80800000L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x100050000L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x1000000000L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x2000000000L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x40000000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x4400000L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 91:
         return jjStopAtPos(0, 43);
      case 93:
         return jjStopAtPos(0, 44);
      case 123:
         return jjStopAtPos(0, 69);
      case 124:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 39, 28);
         break;
      case 45:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         break;
      case 58:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x2462400000L);
      case 70:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 36, 30);
         break;
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x10200000L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x300950000L);
      case 83:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(1, 24, 30);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(1, 27, 30);
         break;
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L);
      case 89:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      case 124:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 38, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, 0L);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L);
      case 68:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 28, 30);
         return jjMoveStringLiteralDfa3_0(active0, 0x840000L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x220000L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x100080000L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
      case 84:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 16, 30);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 29, 30);
         break;
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x200100000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L);
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0x100080000L);
      case 69:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 30);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0x200100000L);
      case 81:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000020000L);
      case 84:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 30);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 30);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
      case 68:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 30);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L);
      case 69:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L);
      case 73:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 30);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      case 80:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 18, 30);
         break;
      case 83:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 30);
         break;
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x120000L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x400200000L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      case 69:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 30);
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0x400080000L);
      case 83:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 17, 30);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L);
      case 84:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 32, 30);
         break;
      case 89:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 30);
         break;
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 76:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 30);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
      case 84:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 30, 30);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 34, 30);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L);
      case 76:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 20, 30);
         break;
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 13, 101);
         break;
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000L);
      case 121:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(7, 14, 101);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000L);
      case 101:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(8, 15, 101);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 84:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 37, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 101;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 36:
                  if ((0x3ff4c1800000000L & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAdd(30);
                  }
                  if ((0x20002c7a00000000L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjCheckNAdd(28);
                  }
                  if ((0x1800000000L & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAddTwoStates(37, 39);
                  }
                  break;
               case 101:
                  if ((0x3ff4c1800000000L & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAddTwoStates(37, 39);
                  }
                  if ((0x3ff4c1800000000L & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAdd(30);
                  }
                  break;
               case 65:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 47)
                  {
                     if (kind > 64)
                        kind = 64;
                  }
                  if (curChar == 42)
                     jjCheckNAddTwoStates(95, 96);
                  else if (curChar == 47)
                     jjCheckNAddStates(3, 5);
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 87;
                  else if (curChar == 47)
                     jjCheckNAddStates(6, 8);
                  if (curChar == 42)
                     jjCheckNAddTwoStates(78, 79);
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(9, 15);
                  else if ((0x20002c7a00000000L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjCheckNAdd(28);
                  }
                  else if ((0x100003600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 47)
                     jjAddStates(16, 21);
                  else if (curChar == 39)
                     jjCheckNAddStates(22, 24);
                  else if (curChar == 34)
                     jjCheckNAddStates(25, 27);
                  else if (curChar == 46)
                     jjCheckNAdd(5);
                  else if (curChar == 63)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAdd(32);
                  }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 6)
                        kind = 6;
                     jjCheckNAddTwoStates(2, 3);
                  }
                  else if ((0x1800000000L & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAdd(30);
                  }
                  else if (curChar == 45)
                     jjAddStates(28, 30);
                  else if (curChar == 48)
                  {
                     if (kind > 6)
                        kind = 6;
                     jjCheckNAddStates(31, 33);
                  }
                  else if (curChar == 47)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 33)
                  {
                     if (kind > 62)
                        kind = 62;
                     jjCheckNAdd(34);
                  }
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 1:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 4:
                  if (curChar == 46)
                     jjCheckNAdd(5);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddStates(34, 36);
                  break;
               case 7:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(8, 9);
                  break;
               case 10:
                  if (curChar == 34)
                     jjCheckNAddStates(25, 27);
                  break;
               case 11:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(25, 27);
                  break;
               case 13:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(25, 27);
                  break;
               case 14:
                  if (curChar == 34 && kind > 12)
                     kind = 12;
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(37, 40);
                  break;
               case 16:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(25, 27);
                  break;
               case 17:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(16);
                  break;
               case 19:
                  if (curChar == 39)
                     jjCheckNAddStates(22, 24);
                  break;
               case 20:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 22:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 23:
                  if (curChar == 39 && kind > 12)
                     kind = 12;
                  break;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(41, 44);
                  break;
               case 25:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 26:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(25);
                  break;
               case 28:
                  if ((0x20002c7a00000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(28);
                  break;
               case 29:
                  if ((0x1800000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(30);
                  break;
               case 30:
                  if ((0x3ff4c1800000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(30);
                  break;
               case 31:
                  if (curChar != 63)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAdd(32);
                  break;
               case 33:
                  if (curChar != 33)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(34);
                  break;
               case 34:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(34);
                  break;
               case 35:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 37:
                  if ((0x3ff4c1800000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddTwoStates(37, 39);
                  break;
               case 40:
               case 42:
                  if (curChar == 47)
                     jjCheckNAddStates(0, 2);
                  break;
               case 41:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 44:
                  if (curChar == 47 && kind > 64)
                     kind = 64;
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(9, 15);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(46, 47);
                  break;
               case 47:
                  if (curChar != 46)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddStates(45, 47);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddStates(45, 47);
                  break;
               case 50:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(51);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(51, 9);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(52, 53);
                  break;
               case 54:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(55);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddTwoStates(55, 9);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(48, 50);
                  break;
               case 58:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(59);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(59, 9);
                  break;
               case 60:
                  if (curChar != 48)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAddStates(31, 33);
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAddTwoStates(62, 3);
                  break;
               case 63:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAddTwoStates(63, 3);
                  break;
               case 64:
                  if (curChar == 47)
                     jjAddStates(16, 21);
                  break;
               case 66:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 67:
                  if ((0x2400L & l) != 0L && kind > 2)
                     kind = 2;
                  break;
               case 68:
                  if (curChar == 10 && kind > 2)
                     kind = 2;
                  break;
               case 69:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(71, 72);
                  break;
               case 71:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(71, 72);
                  break;
               case 72:
                  if (curChar == 42)
                     jjCheckNAddStates(51, 53);
                  break;
               case 73:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(74, 72);
                  break;
               case 74:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(74, 72);
                  break;
               case 75:
                  if (curChar == 47 && kind > 2)
                     kind = 2;
                  break;
               case 76:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 77:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(78, 79);
                  break;
               case 78:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(78, 79);
                  break;
               case 79:
                  if (curChar == 42)
                     jjCheckNAddStates(54, 56);
                  break;
               case 80:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(81, 79);
                  break;
               case 81:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(81, 79);
                  break;
               case 82:
                  if (curChar == 47)
                     jjCheckNAddStates(3, 5);
                  break;
               case 83:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 84:
                  if ((0x2400L & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 85:
                  if (curChar == 10 && kind > 3)
                     kind = 3;
                  break;
               case 86:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(88, 89);
                  break;
               case 88:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(88, 89);
                  break;
               case 89:
                  if (curChar == 42)
                     jjCheckNAddStates(57, 59);
                  break;
               case 90:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(91, 89);
                  break;
               case 91:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(91, 89);
                  break;
               case 92:
                  if (curChar == 47 && kind > 4)
                     kind = 4;
                  break;
               case 93:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 94:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(95, 96);
                  break;
               case 95:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(95, 96);
                  break;
               case 96:
                  if (curChar == 42)
                     jjCheckNAddStates(60, 62);
                  break;
               case 97:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(98, 96);
                  break;
               case 98:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(98, 96);
                  break;
               case 99:
                  if (curChar == 47 && kind > 5)
                     kind = 5;
                  break;
               case 100:
                  if (curChar == 45)
                     jjAddStates(28, 30);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 36:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAddTwoStates(37, 39);
                  }
                  else if ((0x1000000040000000L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjCheckNAdd(28);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAdd(30);
                  }
                  break;
               case 101:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAddTwoStates(37, 39);
                  }
                  else if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 38;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAdd(30);
                  }
                  break;
               case 65:
                  jjCheckNAddStates(0, 2);
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAdd(30);
                  }
                  else if ((0x1000000040000000L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjCheckNAdd(28);
                  }
                  break;
               case 3:
                  if ((0x100000001000L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 6:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(63, 64);
                  break;
               case 9:
                  if ((0x5000000050L & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 11:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(25, 27);
                  break;
               case 12:
                  if (curChar == 92)
                     jjAddStates(65, 67);
                  break;
               case 13:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(25, 27);
                  break;
               case 20:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 21:
                  if (curChar == 92)
                     jjAddStates(68, 70);
                  break;
               case 22:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 28:
                  if ((0x1000000040000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(28);
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(30);
                  break;
               case 30:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(30);
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 37:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddTwoStates(37, 39);
                  break;
               case 38:
                  if (curChar == 93 && kind > 63)
                     kind = 63;
                  break;
               case 39:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 41:
                  jjCheckNAddStates(0, 2);
                  break;
               case 43:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 49:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(71, 72);
                  break;
               case 53:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(73, 74);
                  break;
               case 57:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(75, 76);
                  break;
               case 61:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(62);
                  break;
               case 62:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAddTwoStates(62, 3);
                  break;
               case 66:
                  jjAddStates(6, 8);
                  break;
               case 71:
                  jjCheckNAddTwoStates(71, 72);
                  break;
               case 73:
               case 74:
                  jjCheckNAddTwoStates(74, 72);
                  break;
               case 78:
                  jjCheckNAddTwoStates(78, 79);
                  break;
               case 80:
               case 81:
                  jjCheckNAddTwoStates(81, 79);
                  break;
               case 83:
                  jjAddStates(3, 5);
                  break;
               case 88:
                  jjCheckNAddTwoStates(88, 89);
                  break;
               case 90:
               case 91:
                  jjCheckNAddTwoStates(91, 89);
                  break;
               case 95:
                  jjCheckNAddTwoStates(95, 96);
                  break;
               case 97:
               case 98:
                  jjCheckNAddTwoStates(98, 96);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 36:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAdd(30);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAddTwoStates(37, 39);
                  }
                  break;
               case 101:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAdd(30);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAddTwoStates(37, 39);
                  }
                  break;
               case 65:
               case 41:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(0, 2);
                  break;
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(30);
                  break;
               case 11:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(25, 27);
                  break;
               case 20:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(22, 24);
                  break;
               case 30:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(30);
                  break;
               case 32:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 37:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddTwoStates(37, 39);
                  break;
               case 66:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(6, 8);
                  break;
               case 71:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(71, 72);
                  break;
               case 73:
               case 74:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(74, 72);
                  break;
               case 78:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(78, 79);
                  break;
               case 80:
               case 81:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(81, 79);
                  break;
               case 83:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(3, 5);
                  break;
               case 88:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(88, 89);
                  break;
               case 90:
               case 91:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(91, 89);
                  break;
               case 95:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(95, 96);
                  break;
               case 97:
               case 98:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(98, 96);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 101 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 123:
         return jjStopAtPos(0, 71);
      case 125:
         return jjStopAtPos(0, 73);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 70;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                     kind = 70;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 70)
                     kind = 70;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 123:
         return jjStopAtPos(0, 71);
      case 125:
         return jjStopAtPos(0, 72);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 70;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                     kind = 70;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 70)
                     kind = 70;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   41, 43, 44, 83, 84, 86, 66, 67, 69, 46, 47, 52, 53, 56, 57, 9, 
   65, 76, 77, 82, 93, 94, 20, 21, 23, 11, 12, 14, 1, 4, 45, 61, 
   63, 3, 5, 6, 9, 11, 12, 16, 14, 20, 21, 25, 23, 48, 49, 9, 
   56, 57, 9, 72, 73, 75, 79, 80, 75, 89, 90, 92, 96, 97, 99, 7, 
   8, 13, 15, 17, 22, 24, 26, 50, 51, 54, 55, 58, 59, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec8[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
"\43\151\156\143\154\165\144\145", "\43\154\151\142\162\141\162\171", "\43\147\145\156\145\162\141\164\145", 
"\116\117\124", "\105\130\111\123\124\123", "\116\117\104\125\120", 
"\106\111\116\104\101\114\114", "\103\117\125\116\124\101\114\114", "\125\116\111\121\125\105", 
"\124\105\123\124", "\115\117\104\105\123", "\111\123", "\122\105\101\114\114\131", 
"\124\131\120\105", "\101\123", "\105\116\104", "\104\105\124", "\123\105\115\111\104\105\124", 
"\115\125\114\124\111", "\116\117\116\104\105\124", "\102\117\125\116\104", 
"\104\105\106\101\125\114\124", "\106\101\103\124", "\117\106", "\120\105\122\123\111\123\124\105\116\124", 
"\174\174", "\46\46", "\72\72", "\50", "\51", "\133", "\135", "\74", "\76", "\73", "\54", 
"\56", "\43", "\100", "\174", "\57", "\72\55", "\53", "\52", "\75", null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, "\72", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "inBraces", 
   "inNestedBraces", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 2, -1, 0, -1, 
};
static final long[] jjtoToken = {
   0xf7fffffffffff441L, 0x601L, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x1e0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[101];
private final int[] jjstateSet = new int[202];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public TyRuBaParserTokenManager(JavaCharStream stream)
{
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public TyRuBaParserTokenManager(JavaCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 101; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 71 :
         if (image == null)
              image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
         else
            image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
          nestedBraces++;
         break;
      case 72 :
         if (image == null)
              image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
         else
            image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                nestedBraces--;
                if (nestedBraces == 0) SwitchTo(inBraces);
         break;
      default : 
         break;
   }
}
}
